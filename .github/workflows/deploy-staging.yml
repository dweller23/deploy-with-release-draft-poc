name: Deploy Staging workflow

on:
  push:
    branches:
      - main

jobs:
  pre-build:
    name: Install packages and run quality gates
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - uses: actions/cache@v2
        with:
          path: node_modules
          key: node-modules-${{ hashFiles('yarn.lock') }}

      - name: Install packages
        run: yarn

  build:
    name: Build artifact
    runs-on: ubuntu-latest
    needs: pre-build
    permissions:
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - uses: actions/cache@v2
        with:
          path: node_modules
          key: node-modules-${{ hashFiles('yarn.lock') }}

      - name: build
        run: yarn build

      - name: upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: app-artifact
          path: bin/index.js
          retention-days: 1

  deploy:
    name: Deploy artifact
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - uses: actions/cache@v2
        with:
          path: node_modules
          key: node-modules-${{ hashFiles('yarn.lock') }}

      - name: download artifact
        uses: actions/download-artifact@v3
        with:
          name: app-artifact
          path: bin

      - name: echo context
        uses: actions/github-script@v6
        with:
          script: console.log(context)

      - name: Test accessing env by key
        id: get-secret
        uses: actions/github-script@v6
        env:
          secret1: ${{ secrets.SECRET_1 }}
          secret2: ${{ secrets.SECRET_2 }}
          env: stage
        with:
          script: |
            return process.env.env === 'stage' ? process.env.SECRET_1 : process.env.SECRET_2
          result: string
      - name: Echo result
        run: echo ${{ steps.get-secret.outputs.result }}
        shell: bash
      - name: Validate result
        id: validate-result
        uses: actions/github-script@v6
        env:
          secret1: ${{ secrets.SECRET_1 }}
        with:
          script: |
            return context.steps['get-secret'].outputs.result === process.env.SECRET_1
          result: string
      - name: Echo validation
        run: echo ${{ steps.validate-result.outputs.result }}
        shell: bash

  create-release:
    name: Create release
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write
    strategy:
      matrix:
        region: [ region1, region2 ]

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - uses: actions/cache@v2
        with:
          path: node_modules
          key: node-modules-${{ hashFiles('yarn.lock') }}

      - name: Create output directory
        run: mkdir -p output

      - name: Copy files for artifact with filename change
        run: for SERVICE in component1 component2; do cd ./unformatted-for-artifact/$SERVICE; mv template.yaml $SERVICE.yaml; cd $GITHUB_WORKSPACE; cp ./unformatted-for-artifact/$SERVICE/$SERVICE.yaml ./output/; done

      - name: List artifacts
        run: ls ./output/

      - name: download artifact
        uses: actions/download-artifact@v3
        with:
          name: app-artifact
          path: bin

      - name: get-npm-version
        id: package-version
        uses: martinbeentjes/npm-get-version-action@main

      - name: region release
        id: region-release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "bin/index.js"
          generateReleaseNotes: true
          token: ${{ secrets.GITHUB_TOKEN }}
          draft: true
          tag: ${{ matrix.region }}-${{ steps.package-version.outputs.current-version}}
          name: ${{ matrix.region }}-${{ steps.package-version.outputs.current-version}}

      - name: region release link
        run: echo "${{ steps.region-release.outputs.html_url }}"
